/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.62).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.math.BigDecimal;
import io.swagger.model.CreateProductRequest;
import io.swagger.model.CreateProductResponse;
import io.swagger.model.Product;
import io.swagger.model.Products;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-10-09T03:07:35.488878621Z[GMT]")
@Validated
public interface ProductsApi {

    @Operation(summary = "Clear All Products", description = "Clear All Products", tags={ "Products" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation") })
    @RequestMapping(value = "/products",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> clearAllProducts();


    @Operation(summary = "Create Product", description = "Create Product", tags={ "Products" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CreateProductResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "422", description = "Validation exception"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/products",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.POST)
    ResponseEntity<CreateProductResponse> createProduct(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody CreateProductRequest body
);


    @Operation(summary = "Query Products with Filter + Pagination", description = "Return all products", tags={ "Products" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Products.class))),
        
        @ApiResponse(responseCode = "405", description = "Bad Request - Invalid Parameters") })
    @RequestMapping(value = "/products",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Products> getAllProducts(@Parameter(in = ParameterIn.QUERY, description = "type of text base filter to apply to product name" ,schema=@Schema(allowableValues={ "exact", "prefix", "postfix", "wildcard" }
, defaultValue="wildcard")) @Valid @RequestParam(value = "nameFilterMode", required = false, defaultValue="wildcard") String nameFilterMode
, @Parameter(in = ParameterIn.QUERY, description = "ignore case" ,schema=@Schema( defaultValue="true")) @Valid @RequestParam(value = "ignoreCase", required = false, defaultValue="true") Boolean ignoreCase
, @Parameter(in = ParameterIn.QUERY, description = "number of products to return per page" ,schema=@Schema( defaultValue="0")) @Valid @RequestParam(value = "size", required = false, defaultValue="0") BigDecimal size
, @Parameter(in = ParameterIn.QUERY, description = "starting page index to retrieve" ,schema=@Schema( defaultValue="100")) @Valid @RequestParam(value = "page", required = false, defaultValue="100") BigDecimal page
, @Parameter(in = ParameterIn.QUERY, description = "filter by product id" ,schema=@Schema()) @Valid @RequestParam(value = "productId", required = false) String productId
, @Parameter(in = ParameterIn.QUERY, description = "type of text base filter to apply" ,schema=@Schema(allowableValues={ "gt", "lt", "gte", "lte", "eq" }
)) @Valid @RequestParam(value = "priceComparisonMode", required = false) String priceComparisonMode
, @Parameter(in = ParameterIn.QUERY, description = "find by price equality" ,schema=@Schema()) @Valid @RequestParam(value = "price", required = false) Float price
);


    @Operation(summary = "Retrieve product", description = "Retrieve product by its identifier", tags={ "Products" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Product Id supplied"),
        
        @ApiResponse(responseCode = "404", description = "Product not Found") })
    @RequestMapping(value = "/products/product/{productId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Product> getProductById(@Parameter(in = ParameterIn.PATH, description = "product identifier", required=true, schema=@Schema()) @PathVariable("productId") String productId
);

}

